precision highp float;

varying vec2 textureCoordinate;
uniform sampler2D inputImageTexture;
uniform vec3 chromaKeyColor;
uniform float threshold;
uniform float smoothing;
uniform float contrast;

float luma(vec3 color) {
    return dot(color, vec3(0.299, 0.587, 0.114));
}

vec2 rgbToCrCb(vec3 color) {
    float Y = 0.2989*color.r + 0.5866*color.g + 0.1145*color.b;
    float Cr = 0.7132 * (color.r - Y);
    float Cb = 0.5647 * (color.b - Y);
    return vec2(Cr, Cb);
}

vec4 contrastFilter(vec4 color) {
    return vec4(contrast * (color.rgb - vec3(0.5)) + vec3(0.5), color.w);
}

float chromaKey(vec4 textureColor, vec3 colorToPreserve) {
    vec2 maskCrCb = rgbToCrCb(colorToPreserve);
    vec2 crCb = rgbToCrCb(textureColor.rgb);
    
    float dist = distance(crCb, maskCrCb);
    return smoothstep(threshold, threshold + smoothing, dist);
}

void main() {
    vec4 textureColor = texture2D(inputImageTexture, textureCoordinate);
    
    // First contrast pass
    textureColor = contrastFilter(textureColor);
    
    // Chroma cutoff value
    float blendValue = chromaKey(textureColor, chromaKeyColor);
    
    // Second contrast pass
    textureColor = contrastFilter(textureColor);
    
    // Black and white, smoothly clamped to [0.15, 0.65]
    // (Gradient Map like filter)
    float luminance = smoothstep(0.15, 0.65, luma(textureColor.rgb));
    
    // Blend between grayscale and input color using the chroma key blend value.
    // This will preserve colors close to the chroma key color
    vec3 rgbOut = mix(vec3(luminance), textureColor.rgb, 1.0 - blendValue);
    
    gl_FragColor = vec4(rgbOut, textureColor.w);
}
